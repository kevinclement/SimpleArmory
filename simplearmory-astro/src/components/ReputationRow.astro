---
// Props interface
export interface Props {
  faction: {
    id: number;
    name: string;
    value: number;
    max: number;
    level: number;
    levels: Array<[number, string]>;
    perc: number;
    renown?: boolean;
  };
}

// Component props
const { faction } = Astro.props;

// Helper functions
function getColor(level: number) {
  const levelColors = [
    '#c22',
    'red',
    '#e62',
    '#d29d01',
    '#55b101',
    '#55b101',
    '#55b101',
    '#0ec077',
  ];

  return levelColors[
    Math.max(
      0,
      faction.renown
        ? Math.floor((level / (faction.levels.length - 1)) * (levelColors.length - 1))
        : levelColors.length - (faction.levels.length - level)
    )
  ];
}

function getBorderColor(level: number) {
  return level <= faction.level ? getColor(faction.level) : "lightgray";
}

function calculateLevelRatio(levelIdx: number) {
  if(faction.renown) {
    if(faction.level == faction.levels.length-1) {
      return 1;
    }
  }
  
  if (levelIdx === faction.level) {
    return faction.perc / 100;
  }
  else if (levelIdx < faction.level) {
    return 1;
  }
  else {
    return 0;
  }
}

function tierProgressString(levelIdx: number) {
  if (levelIdx == faction.levels.length - 1) {
    return "";
  } else {
    const levelMax = (
      faction.levels[levelIdx + 1][0] - faction.levels[levelIdx][0]
    );
    let levelCur;
    if (levelIdx === faction.level) {
      levelCur = faction.value;
    }
    else if (levelIdx < faction.level) {
      levelCur = levelMax;
    }
    else {
      levelCur = 0;
    }
    return ": " + levelCur + " / " + levelMax;
  }
}

function getLevelWidth(levelIdx: number) {
  const startThreshold = faction.levels[levelIdx][0];
  if (levelIdx < faction.levels.length - 1) {
    const endThreshold = faction.levels[levelIdx + 1][0];
    const maxThreshold = faction.levels[faction.levels.length - 1][0];
    const baseRatio = (endThreshold - startThreshold) / maxThreshold;
    return Math.max(
      baseRatio * 400.0 - 1,
      0
    );
  } else {
    return 10;
  }
}
---

<div class="reputation-row">
  <h4 class="faction-label">
    <a target="_blank" href={`https://www.wowhead.com/faction=${faction.id}`}>{ faction.name }</a>
  </h4>
  
  <div class="reputation-progress">
    {faction.levels.map((level, levelIdx) => (
      <div 
        title={`${level[1]}${tierProgressString(levelIdx)}`} 
        class="rep-progress-block" 
        style={`width: ${getLevelWidth(levelIdx)}px; border: 1px solid ${getBorderColor(levelIdx)};`}
      >
        <div style={`background-color: ${getColor(faction.level)}; height: 100%; width: ${calculateLevelRatio(levelIdx) * 100}%`}></div>
      </div>
    ))}
  </div>
  
  <span class="reputation-status">
    <b style={`color: ${getColor(faction.level)}`}>{faction.levels[faction.level][1]}</b>
    {faction.max !== 0 && !(faction.renown && faction.level == faction.levels.length-1) && 
      <span style="color: grey">â€¢ {faction.value} / {faction.max}</span>
    }
  </span>
</div>

<style>
  .reputation-row {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
  }
  
  .faction-label {
    width: 200px;
    margin: 0;
    padding-right: 15px;
    font-size: 14px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .faction-label a {
    color: inherit;
    text-decoration: none;
  }
  
  .faction-label a:hover {
    text-decoration: underline;
  }
  
  .reputation-progress {
    display: flex;
    height: 16px;
    margin-right: 10px;
  }
  
  .rep-progress-block {
    height: 100%;
    box-sizing: border-box;
  }
  
  .reputation-status {
    font-size: 12px;
    white-space: nowrap;
  }
</style>